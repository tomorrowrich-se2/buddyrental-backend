name: Release Pipeline

permissions:
  packages: write
  deployments: write
  contents: write
  pull-requests: write

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-test:
    concurrency:
      group: build-test-${{ github.ref }}
      cancel-in-progress: true
    if: startsWith(github.ref, 'refs/heads/')
    name: Build and Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        task: [build, test]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Update Prisma Client
        run: pnpm prisma generate

      - name: Run ${{ matrix.task }}
        run: |
          if [ "${{ matrix.task }}" == "build" ]; then
            pnpm run build
          else
            pnpm run test
          fi

  release:
    concurrency:
      group: release-${{ github.ref }}
      cancel-in-progress: true
    if: startsWith(github.ref, 'refs/heads/')
    name: Semantic Release
    needs: build-test
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.semantic-release.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Update Prisma Client
        run: pnpm prisma generate

      - name: Run Semantic Release
        id: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.SEM_REL_TOKEN }}
        run: |
          pnpm dlx semantic-release --ci
          VERSION=$(cat VERSION || echo "")
          echo "Resolved version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  docker-build:
    concurrency:
      group: docker-build-${{ github.ref }}
      cancel-in-progress: true
    needs: release
    name: Build and Push Image ${{ needs.release.outputs.version }}
    if: ${{ needs.release.outputs.version != '' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern=${{ github.ref_name }}
            type=raw,value=${{ needs.release.outputs.version }}
            ${{ github.ref_name == 'main' && 'type=raw,value=prod' || github.ref_name == 'develop' && 'type=raw,value=devel' }}
            type=raw,value=latest

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    concurrency:
      group: deploy-${{ github.ref }}
      cancel-in-progress: true
    needs:
      - release
      - docker-build
    if: ${{ needs.docker-build.result == 'success' || needs.docker-build.result == 'skipped' }}
    name: Deploy Prisma Migrations
    runs-on: ubuntu-latest
    environment: ${{ (github.ref_name == 'develop' && 'Staging') || (github.ref_name == 'main' && 'Production') || '' }}
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      DIRECT_URL: ${{ secrets.DIRECT_URL }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Migrate Prisma
        run: pnpm prisma migrate deploy

  sync:
    if: github.ref_name == 'main'
    concurrency:
      group: sync-main-develop
      cancel-in-progress: true
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Verify CI Passed for Last Merge from Develop
        run: |
          # Fetch the last merge commit from develop to main
          LAST_MERGE_SHA=$(git log --merges --pretty=format:'%H' -n 1 develop)
          if [ -z "$LAST_MERGE_SHA" ]; then
            echo "No recent merge from develop found, skipping sync."
            exit 1
          fi
          CI_STATUS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/commits/$LAST_MERGE_SHA/status" | jq -r '.state')
          if [[ "$CI_STATUS" != "success" ]]; then
            echo "CI checks for the last merge did NOT pass. Aborting sync."
            exit 1
          fi
          echo "CI checks passed. Proceeding with the sync."

      - name: Merge main into develop
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git checkout develop
          git pull origin develop
          git merge --no-edit main
          git push origin develop
