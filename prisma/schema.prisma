generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Credential {
  userId   String  @id @unique @default(uuid()) @map("user_id") @db.Uuid
  email    String  @unique
  password String
  verified Boolean @default(false)
}

model User {
  userId    String @id @unique @default(uuid()) @map("user_id") @db.Uuid
  firstName String @map("first_name")
  lastName  String @map("last_name")
  citizenId String @map("citizen_id")

  email       String  @unique
  phoneNumber String  @map("phone_number")
  password    String  @db.VarChar(64)
  verified    Boolean @default(false)

  displayName String?  @map("display_name") @db.VarChar(255)
  gender      String
  dateOfBirth DateTime @map("date_of_birth")

  address String
  city    String
  zipcode String

  profilePicture  String?  @map("profile_picture")
  description     String?
  reviewsMade     Review[] @relation("ReviewToCommenter")
  reviewsReceived Review[] @relation("ReviewToProfile")
  buddy           Buddy?
  reservations    ReservationRecord[]
}

model Buddy {
  buddyId                String @id @unique @default(uuid()) @map("buddy_id") @db.Uuid
  withdrawableCoinAmount Float  @map("withdrawable_coin_amount")
  averageRating          Float? @map("average_rating")
  minPrice               Float  @map("min_price")
  maxPrice               Float  @map("max_price")

  user User @relation(fields: [buddyId], references: [userId], onDelete: Cascade)
  reservations ReservationRecord[]
}

model Review {
  reviewId    Int      @id @default(autoincrement())
  commenterId String   @db.Uuid
  profileId   String   @db.Uuid
  createdAt   DateTime @default(now())
  rating      Int
  comment     String

  commenter User @relation("ReviewToCommenter", fields: [commenterId], references: [userId], onDelete: Cascade)
  profile   User @relation("ReviewToProfile", fields: [profileId], references: [userId], onDelete: Cascade)
}

model ReservationRecord {
  reservationId   String   @id @unique @default(uuid()) @map("reservation_id") @db.Uuid
  priceCoin       Float    @map("price_coin")
  reservationDate DateTime @map("reservation_date")
  status          String   @map("status")
  createTimestamp DateTime @default(now()) @map("create_timestamp")

  userId          String   @map("user_id") @db.Uuid
  buddyId         String   @map("buddy_id") @db.Uuid

  user            User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  buddy           Buddy    @relation(fields: [buddyId], references: [buddyId], onDelete: Cascade)
}